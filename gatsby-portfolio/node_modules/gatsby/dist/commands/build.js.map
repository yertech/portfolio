{"version":3,"sources":["../../src/commands/build.js"],"names":["_","require","path","report","buildHTML","buildProductionBundle","bootstrap","apiRunnerNode","copyStaticDirs","initTracer","stopTracer","db","signalExit","telemetry","store","emitter","queryUtil","pageDataUtil","WorkerPool","structureWebpackErrors","waitJobsFinished","Promise","resolve","reject","onEndJob","getState","jobs","active","length","off","on","module","exports","build","program","publicDir","join","directory","openTracingConfigFile","buildActivity","phantomActivity","start","trackCli","exitCode","buildSpan","span","setTag","graphqlRunner","parentSpan","pageQueryIds","processPageQueries","processStaticQueries","getInitialQueryProcessors","graphql","activity","activityTimer","stats","catch","err","panic","end","workerPool","create","webpackCompilationHash","hash","dispatch","type","payload","cleanPagePaths","difference","pages","keys","updateCompilationHashes","boundActionCreators","setProgramStatus","saveState","pagePaths","createProgress","buildPages","stage","id","context","errorPath","match","message","ref","error","done","info","process","uptime","finish"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst _ = require(`lodash`)\nconst path = require(`path`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { copyStaticDirs } = require(`../utils/get-static-dir`)\nconst { initTracer, stopTracer } = require(`../utils/tracer`)\nconst db = require(`../db`)\nconst signalExit = require(`signal-exit`)\nconst telemetry = require(`gatsby-telemetry`)\nconst { store, emitter } = require(`../redux`)\nconst queryUtil = require(`../query`)\nconst pageDataUtil = require(`../utils/page-data`)\nconst WorkerPool = require(`../utils/worker/pool`)\nconst { structureWebpackErrors } = require(`../utils/webpack-error-utils`)\n\ntype BuildArgs = {\n  directory: string,\n  sitePackageJson: object,\n  prefixPaths: boolean,\n  noUglify: boolean,\n  openTracingConfigFile: string,\n}\n\nconst waitJobsFinished = () =>\n  new Promise((resolve, reject) => {\n    const onEndJob = () => {\n      if (store.getState().jobs.active.length === 0) {\n        resolve()\n        emitter.off(`END_JOB`, onEndJob)\n      }\n    }\n    emitter.on(`END_JOB`, onEndJob)\n    onEndJob()\n  })\n\nmodule.exports = async function build(program: BuildArgs) {\n  const publicDir = path.join(program.directory, `public`)\n  initTracer(program.openTracingConfigFile)\n  const buildActivity = report.phantomActivity(`build`)\n  buildActivity.start()\n\n  telemetry.trackCli(`BUILD_START`)\n  signalExit(exitCode => {\n    telemetry.trackCli(`BUILD_END`, { exitCode })\n  })\n\n  const buildSpan = buildActivity.span\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { graphqlRunner } = await bootstrap({\n    ...program,\n    parentSpan: buildSpan,\n  })\n\n  const {\n    pageQueryIds,\n    processPageQueries,\n    processStaticQueries,\n  } = queryUtil.getInitialQueryProcessors({\n    parentSpan: buildSpan,\n  })\n\n  await processStaticQueries()\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirs()\n\n  let activity = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  activity.start()\n  const stats = await buildProductionBundle(program, {\n    parentSpan: activity.span,\n  }).catch(err => {\n    activity.panic(structureWebpackErrors(`build-javascript`, err))\n  })\n  activity.end()\n\n  const workerPool = WorkerPool.create()\n\n  const webpackCompilationHash = stats.hash\n  if (webpackCompilationHash !== store.getState().webpackCompilationHash) {\n    store.dispatch({\n      type: `SET_WEBPACK_COMPILATION_HASH`,\n      payload: webpackCompilationHash,\n    })\n\n    activity = report.activityTimer(`Rewriting compilation hashes`, {\n      parentSpan: buildSpan,\n    })\n    activity.start()\n\n    // We need to update all page-data.json files with the new\n    // compilation hash. As a performance optimization however, we\n    // don't update the files for `pageQueryIds` (dirty queries),\n    // since they'll be written after query execution.\n    const cleanPagePaths = _.difference(\n      [...store.getState().pages.keys()],\n      pageQueryIds\n    )\n\n    await pageDataUtil.updateCompilationHashes(\n      { publicDir, workerPool },\n      cleanPagePaths,\n      webpackCompilationHash\n    )\n\n    activity.end()\n  }\n\n  await processPageQueries()\n\n  require(`../redux/actions`).boundActionCreators.setProgramStatus(\n    `BOOTSTRAP_QUERY_RUNNING_FINISHED`\n  )\n\n  await waitJobsFinished()\n\n  await db.saveState()\n  const pagePaths = [...store.getState().pages.keys()]\n  activity = report.createProgress(\n    `Building static HTML for pages`,\n    pagePaths.length,\n    0,\n    {\n      parentSpan: buildSpan,\n    }\n  )\n  activity.start()\n  try {\n    await buildHTML.buildPages({\n      program,\n      stage: `build-html`,\n      pagePaths,\n      activity,\n      workerPool,\n    })\n  } catch (err) {\n    let id = `95313` // TODO: verify error IDs exist\n    const context = {\n      errorPath: err.context && err.context.path,\n    }\n\n    const match = err.message.match(\n      /ReferenceError: (window|document|localStorage|navigator|alert|location) is not defined/i\n    )\n    if (match && match[1]) {\n      id = `95312`\n      context.ref = match[1]\n    }\n\n    activity.panic({\n      id,\n      context,\n      error: err,\n    })\n  }\n  activity.done()\n\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n  await stopTracer()\n  workerPool.end()\n  buildActivity.end()\n}\n"],"file":"build.js"}